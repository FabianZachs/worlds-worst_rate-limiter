Middleware rate limiter
Rate limiter works based on user account (or IP?)
We inform users of being throttled  (HTTP response code 429 (too many requests))
The rate limiter is distributed
rate limiter is middleware: client --- rate_limiter --> server
Rate limiter is in the API gateway
  API gateway is a fully managed service that supports rate limiting, SSL termination, authentication, IP whitelisting, servicing static content


Chosen Rate limiting algorithm: 
  - Token bucket. Request consumes a token, tokens are added at a constant rate (ex, 4 tokens every minute)
      - token can overflow bucket, need to decide bucket size, refill rate, different buckets for various requests (GET, POST, etc)

  - Leaking bucket: requests added to queue (if queue not full; dropped if it is)
    - requests pulled from queue and processed at regular intervals
    - Tune bucket size and request outflow rate
    - Good when we need steady outflow rate

  - Fixed window: timeline split into fixed time windows. Counter for each window, w/ requests inc counter
    - If request limit hit for counter window, drop additional requests
    - Issue is we can have burst of requests between 2 counter windows. Ex 5 req per min window. But could have 5 in last 30 sec of previous window and 5 in first 30 sec of next window. 10 req in 1 min, apposed to 5.

  - Sliding window: track request timestamps
    - We reject requests when we have exceeded past the count for the window. Then when the next request comes in the new window, this marks time , we remove the logs of 
  - Sliding window counter:
    - Suppose we allow 7 requests per min, 5 req in previous min and 3 in current minute. If a new request comes in at 30% into current minute, then:
      - rolling requests = requests in current window + requests in previous window * (1 - percent in current window)
        =  3 + 5 * 0.7 =6.5 < 7 => allow request



Storage of counters:
  - DB - bad, dont want disk accesses
  - redis - good, in-memory, provides INCR, EXPIRE commands
    - client sends req, fetch counter for corresponding bucket from redis, checks if rate limit hit. Request sent to API servers if not (sends err if it did), incr counter and save back to redit

When too many Requests; they can be dropper or forwarded to a queue

Distributed environment:
  - Since we read counter from redis, incr, and write back, we have possible race condition between multiple threads. Lock overhead is too high
    - MORE
  We use centralised redis so that with multiple rate limiters, a client can send request to either and be synchronised (we dont have issue where 1 rate limiter knows nothing about previous client requests because they previous communicated with the other rate limiter)


Monitoring:
  - to ensure rate limiter is effective
  - to ensure rate limiting rules are effective (too many dropped requests, lighten rules. Too much of a spike, swap algorithms)




### Redis
$ redis-server # starts redis server
$ redis-cli
>  SET <KEY> <VALUE>
> GET <KEY>
> EXISTS <KEY>
> KEYS *
> flushall
> clear
> expire <KEY> <#seconds>
> ttl <KEY> # time to live
> setex <KEY> <TTL> <VALUE>

#### Lists
> lpush <KEY> <VALUE>
> rpush <KEY> <VALUE>
> lpop <KEY> 
> rpop <KEY> 
> lrange <KEY> <START_INDEX> <END_INDEX>
               0             -1

#### Sets
> SADD <KEY> <VALUE>
> SMEMBERS <KEY>
> SREM <KEY> <VALUE>

#### Hashes (a key value pair inside redis's key pair)
> HSET <KEY> <FIELD> <VALUE>
> HGET <KEY> <FIELD>
> HGETALL <KEY>
> HDEL <KEY> <FIELD>
> HEXISTS <KEY> <FIELD>




Though redis has TTL, it doesnt support this for elements of a list. So the application must handle this.

                   |
                   |
                   |
               X   |
    X       X  X   |    x
+-----+------------+------+----
0    0.3           1     1.3
Algorithm:
1)  get list of query timestamps from redis:
  ex: 0.2, 0.6, 0.6, 1.2
2) remove queries before the query window (time() - 60s)
                   |
                   |
                   |
               X   |
            X  X   |    x
+-----+------------+------+----
0    0.3           1     1.3

3) Find the % into the current window: time_in_current+window = time() - second_round_down(time())    
  ex: time_in_current_window = 1.3 - 1.0 = 0.3s 
  this is also percent_in_current_window
4) Find num requests in current window by starting from latest request and counting back
                <---
  ex: 0.6, 0.6, 1.2 
5) Find num requests in previous window
  ex: num_req_in_prev_window = total - num_req_in_current_window

5) Compute:
  rolling_requests = num_req_in_current_window + num_req_in_prev_window * (1 - percent_in_current_window)

6) If rolling_requests < req_limit: return success and add the request to redis
  
